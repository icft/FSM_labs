# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : fsm.sm

import statemap


class FsmState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def EOS(self, fsm):
        self.Default(fsm)

    def alnum(self, fsm):
        self.Default(fsm)

    def alpha(self, fsm):
        self.Default(fsm)

    def digit(self, fsm):
        self.Default(fsm)

    def equal(self, fsm):
        self.Default(fsm)

    def minus(self, fsm):
        self.Default(fsm)

    def natural(self, fsm):
        self.Default(fsm)

    def operations(self, fsm):
        self.Default(fsm)

    def separator(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)


class FSM_Default(FsmState):
    pass


class FSM_q0(FSM_Default):

    def natural(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q1)
        fsm.getState().Entry(fsm)


class FSM_q1(FSM_Default):

    def digit(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q1)
        fsm.getState().Entry(fsm)

    def separator(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q2)
        fsm.getState().Entry(fsm)


class FSM_q2(FSM_Default):

    def alpha(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q3)
        fsm.getState().Entry(fsm)


class FSM_q3(FSM_Default):

    def alnum(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q3)
        fsm.getState().Entry(fsm)

    def equal(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q5)
        fsm.getState().Entry(fsm)

    def separator(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q4)
        fsm.getState().Entry(fsm)


class FSM_q4(FSM_Default):

    def equal(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q5)
        fsm.getState().Entry(fsm)

    def separator(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q4)
        fsm.getState().Entry(fsm)


class FSM_q5(FSM_Default):

    def alpha(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q8)
        fsm.getState().Entry(fsm)

    def minus(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q7)
        fsm.getState().Entry(fsm)

    def natural(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q9)
        fsm.getState().Entry(fsm)

    def separator(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q6)
        fsm.getState().Entry(fsm)


class FSM_q6(FSM_Default):

    def alnum(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q8)
        fsm.getState().Entry(fsm)

    def minus(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q7)
        fsm.getState().Entry(fsm)

    def natural(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q9)
        fsm.getState().Entry(fsm)

    def separator(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q6)
        fsm.getState().Entry(fsm)


class FSM_q7(FSM_Default):

    def natural(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q9)
        fsm.getState().Entry(fsm)


class FSM_q8(FSM_Default):

    def EOS(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.OK)
        fsm.getState().Entry(fsm)

    def alnum(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q8)
        fsm.getState().Entry(fsm)

    def operations(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q5)
        fsm.getState().Entry(fsm)

    def separator(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q10)
        fsm.getState().Entry(fsm)


class FSM_q9(FSM_Default):

    def EOS(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.OK)
        fsm.getState().Entry(fsm)

    def digit(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q9)
        fsm.getState().Entry(fsm)

    def separator(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q10)
        fsm.getState().Entry(fsm)


class FSM_q10(FSM_Default):

    def EOS(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.OK)
        fsm.getState().Entry(fsm)

    def operations(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q5)
        fsm.getState().Entry(fsm)

    def separator(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(FSM.q10)
        fsm.getState().Entry(fsm)


class FSM_OK(FSM_Default):
    pass


class FSM(object):
    q0 = FSM_q0('FSM.q0', 0)
    q1 = FSM_q1('FSM.q1', 1)
    q2 = FSM_q2('FSM.q2', 2)
    q3 = FSM_q3('FSM.q3', 3)
    q4 = FSM_q4('FSM.q4', 4)
    q5 = FSM_q5('FSM.q5', 5)
    q6 = FSM_q6('FSM.q6', 6)
    q7 = FSM_q7('FSM.q7', 7)
    q8 = FSM_q8('FSM.q8', 8)
    q9 = FSM_q9('FSM.q9', 9)
    q10 = FSM_q10('FSM.q10', 10)
    OK = FSM_OK('FSM.OK', 11)
    Default = FSM_Default('FSM.Default', -1)


class Fsm_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, FSM.q0)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None

        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
