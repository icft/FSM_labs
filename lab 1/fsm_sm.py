# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : fsm.sm

import statemap


class FsmState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def EOS(self, fsm):
        self.Default(fsm)

    def alnum(self, fsm):
        self.Default(fsm)

    def alpha(self, fsm):
        self.Default(fsm)

    def digit(self, fsm):
        self.Default(fsm)

    def equal(self, fsm):
        self.Default(fsm)

    def minus(self, fsm):
        self.Default(fsm)

    def natural(self, fsm):
        self.Default(fsm)

    def operations(self, fsm):
        self.Default(fsm)

    def separator(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class Map1_Default(FsmState):
    pass

class Map1_q0(Map1_Default):

    def natural(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q1)
        fsm.getState().Entry(fsm)

class Map1_q1(Map1_Default):

    def digit(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q1)
        fsm.getState().Entry(fsm)

    def separator(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q2)
        fsm.getState().Entry(fsm)

class Map1_q2(Map1_Default):

    def alpha(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q3)
        fsm.getState().Entry(fsm)

class Map1_q3(Map1_Default):

    def alnum(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q3)
        fsm.getState().Entry(fsm)

    def equal(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q5)
        fsm.getState().Entry(fsm)

    def separator(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q4)
        fsm.getState().Entry(fsm)

class Map1_q4(Map1_Default):

    def equal(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q5)
        fsm.getState().Entry(fsm)

    def separator(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q4)
        fsm.getState().Entry(fsm)

class Map1_q5(Map1_Default):

    def alpha(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q8)
        fsm.getState().Entry(fsm)

    def minus(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q7)
        fsm.getState().Entry(fsm)

    def natural(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q9)
        fsm.getState().Entry(fsm)

    def separator(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q6)
        fsm.getState().Entry(fsm)

class Map1_q6(Map1_Default):

    def alnum(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q8)
        fsm.getState().Entry(fsm)

    def minus(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q7)
        fsm.getState().Entry(fsm)

    def natural(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q9)
        fsm.getState().Entry(fsm)

    def separator(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q6)
        fsm.getState().Entry(fsm)

class Map1_q7(Map1_Default):

    def natural(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q9)
        fsm.getState().Entry(fsm)

class Map1_q8(Map1_Default):

    def EOS(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.OK)
        fsm.getState().Entry(fsm)

    def alnum(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q8)
        fsm.getState().Entry(fsm)

    def operations(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q5)
        fsm.getState().Entry(fsm)

    def separator(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q10)
        fsm.getState().Entry(fsm)

class Map1_q9(Map1_Default):

    def EOS(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.OK)
        fsm.getState().Entry(fsm)

    def digit(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q9)
        fsm.getState().Entry(fsm)

    def separator(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q10)
        fsm.getState().Entry(fsm)

class Map1_q10(Map1_Default):

    def EOS(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.OK)
        fsm.getState().Entry(fsm)

    def operations(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q5)
        fsm.getState().Entry(fsm)

    def separator(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.q10)
        fsm.getState().Entry(fsm)

class Map1_OK(Map1_Default):
    pass

class Map1(object):

    q0 = Map1_q0('Map1.q0', 0)
    q1 = Map1_q1('Map1.q1', 1)
    q2 = Map1_q2('Map1.q2', 2)
    q3 = Map1_q3('Map1.q3', 3)
    q4 = Map1_q4('Map1.q4', 4)
    q5 = Map1_q5('Map1.q5', 5)
    q6 = Map1_q6('Map1.q6', 6)
    q7 = Map1_q7('Map1.q7', 7)
    q8 = Map1_q8('Map1.q8', 8)
    q9 = Map1_q9('Map1.q9', 9)
    q10 = Map1_q10('Map1.q10', 10)
    OK = Map1_OK('Map1.OK', 11)
    Default = Map1_Default('Map1.Default', -1)

class Fsm_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, Map1.q0)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
